# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Book implements Node {
  id: ID!
  author: String!
  title: String!
  bookType: String
  genre(where: GenreWhereInput): Genre
  description: String!
  linkImg: String
  linkBuy: String
  favorite: Boolean!
  postedBy(where: UserWhereInput): User
}

type Genre implements Node {
  id: ID!
  name: String!
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}


#
# Other Types
#

type AggregateBook {
  count: Int!
}

type AggregateGenre {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type BookConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  author: String!
  title: String!
  bookType: String
  description: String!
  linkImg: String
  linkBuy: String
  favorite: Boolean!
  genre: GenreCreateOneInput
  postedBy: UserCreateOneWithoutBooksInput
}

input BookCreateManyWithoutPostedByInput {
  create: [BookCreateWithoutPostedByInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateWithoutPostedByInput {
  author: String!
  title: String!
  bookType: String
  description: String!
  linkImg: String
  linkBuy: String
  favorite: Boolean!
  genre: GenreCreateOneInput
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  The item at the end of the edge.
  """
  node: Book!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  title_ASC
  title_DESC
  bookType_ASC
  bookType_DESC
  description_ASC
  description_DESC
  linkImg_ASC
  linkImg_DESC
  linkBuy_ASC
  linkBuy_DESC
  favorite_ASC
  favorite_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  author: String!
  title: String!
  bookType: String
  description: String!
  linkImg: String
  linkBuy: String
  favorite: Boolean!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BookSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [BookSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BookSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  author: String
  title: String
  bookType: String
  description: String
  linkImg: String
  linkBuy: String
  favorite: Boolean
  genre: GenreUpdateOneInput
  postedBy: UserUpdateOneWithoutBooksInput
}

input BookUpdateManyWithoutPostedByInput {
  create: [BookCreateWithoutPostedByInput!]
  connect: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutPostedByInput!]
}

input BookUpdateWithoutPostedByDataInput {
  author: String
  title: String
  bookType: String
  description: String
  linkImg: String
  linkBuy: String
  favorite: Boolean
  genre: GenreUpdateOneInput
}

input BookUpdateWithWhereUniqueWithoutPostedByInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutPostedByDataInput!
}

input BookUpsertWithWhereUniqueWithoutPostedByInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutPostedByDataInput!
  create: BookCreateWithoutPostedByInput!
}

input BookWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BookWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [BookWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BookWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  author: String
  """
  All values that are not equal to given value.
  """
  author_not: String
  """
  All values that are contained in given list.
  """
  author_in: [String!]
  """
  All values that are not contained in given list.
  """
  author_not_in: [String!]
  """
  All values less than the given value.
  """
  author_lt: String
  """
  All values less than or equal the given value.
  """
  author_lte: String
  """
  All values greater than the given value.
  """
  author_gt: String
  """
  All values greater than or equal the given value.
  """
  author_gte: String
  """
  All values containing the given string.
  """
  author_contains: String
  """
  All values not containing the given string.
  """
  author_not_contains: String
  """
  All values starting with the given string.
  """
  author_starts_with: String
  """
  All values not starting with the given string.
  """
  author_not_starts_with: String
  """
  All values ending with the given string.
  """
  author_ends_with: String
  """
  All values not ending with the given string.
  """
  author_not_ends_with: String
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  bookType: String
  """
  All values that are not equal to given value.
  """
  bookType_not: String
  """
  All values that are contained in given list.
  """
  bookType_in: [String!]
  """
  All values that are not contained in given list.
  """
  bookType_not_in: [String!]
  """
  All values less than the given value.
  """
  bookType_lt: String
  """
  All values less than or equal the given value.
  """
  bookType_lte: String
  """
  All values greater than the given value.
  """
  bookType_gt: String
  """
  All values greater than or equal the given value.
  """
  bookType_gte: String
  """
  All values containing the given string.
  """
  bookType_contains: String
  """
  All values not containing the given string.
  """
  bookType_not_contains: String
  """
  All values starting with the given string.
  """
  bookType_starts_with: String
  """
  All values not starting with the given string.
  """
  bookType_not_starts_with: String
  """
  All values ending with the given string.
  """
  bookType_ends_with: String
  """
  All values not ending with the given string.
  """
  bookType_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  linkImg: String
  """
  All values that are not equal to given value.
  """
  linkImg_not: String
  """
  All values that are contained in given list.
  """
  linkImg_in: [String!]
  """
  All values that are not contained in given list.
  """
  linkImg_not_in: [String!]
  """
  All values less than the given value.
  """
  linkImg_lt: String
  """
  All values less than or equal the given value.
  """
  linkImg_lte: String
  """
  All values greater than the given value.
  """
  linkImg_gt: String
  """
  All values greater than or equal the given value.
  """
  linkImg_gte: String
  """
  All values containing the given string.
  """
  linkImg_contains: String
  """
  All values not containing the given string.
  """
  linkImg_not_contains: String
  """
  All values starting with the given string.
  """
  linkImg_starts_with: String
  """
  All values not starting with the given string.
  """
  linkImg_not_starts_with: String
  """
  All values ending with the given string.
  """
  linkImg_ends_with: String
  """
  All values not ending with the given string.
  """
  linkImg_not_ends_with: String
  linkBuy: String
  """
  All values that are not equal to given value.
  """
  linkBuy_not: String
  """
  All values that are contained in given list.
  """
  linkBuy_in: [String!]
  """
  All values that are not contained in given list.
  """
  linkBuy_not_in: [String!]
  """
  All values less than the given value.
  """
  linkBuy_lt: String
  """
  All values less than or equal the given value.
  """
  linkBuy_lte: String
  """
  All values greater than the given value.
  """
  linkBuy_gt: String
  """
  All values greater than or equal the given value.
  """
  linkBuy_gte: String
  """
  All values containing the given string.
  """
  linkBuy_contains: String
  """
  All values not containing the given string.
  """
  linkBuy_not_contains: String
  """
  All values starting with the given string.
  """
  linkBuy_starts_with: String
  """
  All values not starting with the given string.
  """
  linkBuy_not_starts_with: String
  """
  All values ending with the given string.
  """
  linkBuy_ends_with: String
  """
  All values not ending with the given string.
  """
  linkBuy_not_ends_with: String
  favorite: Boolean
  """
  All values that are not equal to given value.
  """
  favorite_not: Boolean
  genre: GenreWhereInput
  postedBy: UserWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type GenreConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GenreEdge]!
  aggregate: AggregateGenre!
}

input GenreCreateInput {
  name: String!
}

input GenreCreateOneInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  The item at the end of the edge.
  """
  node: Genre!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GenreOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GenrePreviousValues {
  id: ID!
  name: String!
}

type GenreSubscriptionPayload {
  mutation: MutationType!
  node: Genre
  updatedFields: [String!]
  previousValues: GenrePreviousValues
}

input GenreSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GenreSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GenreWhereInput
}

input GenreUpdateDataInput {
  name: String
}

input GenreUpdateInput {
  name: String
}

input GenreUpdateOneInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GenreUpdateDataInput
  upsert: GenreUpsertNestedInput
}

input GenreUpsertNestedInput {
  update: GenreUpdateDataInput!
  create: GenreCreateInput!
}

input GenreWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GenreWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input GenreWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  createGenre(data: GenreCreateInput!): Genre!
  createUser(data: UserCreateInput!): User!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertGenre(where: GenreWhereUniqueInput!, create: GenreCreateInput!, update: GenreUpdateInput!): Genre!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyBooks(data: BookUpdateInput!, where: BookWhereInput): BatchPayload!
  updateManyGenres(data: GenreUpdateInput!, where: GenreWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyGenres(where: GenreWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  book(where: BookWhereUniqueInput!): Book
  genre(where: GenreWhereUniqueInput!): Genre
  user(where: UserWhereUniqueInput!): User
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  genresConnection(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenreConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  genre(where: GenreSubscriptionWhereInput): GenreSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  books: BookCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBooksInput {
  name: String!
  email: String!
  password: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  books: BookUpdateManyWithoutPostedByInput
}

input UserUpdateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
}

input UserUpdateWithoutBooksDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput!
  create: UserCreateWithoutBooksInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
